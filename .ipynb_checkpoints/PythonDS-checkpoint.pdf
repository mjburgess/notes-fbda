{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook\n",
    "\n",
    "* idea\n",
    "    * report-first\n",
    "    * documentation-first\n",
    "    * output-first\n",
    "        * for insight, reasoning, analysis, inference\n",
    "    * code-secondary\n",
    "\n",
    "* text cell\n",
    "    * contents of the cell are just text\n",
    "    * markdown -- simple formatting syntax\n",
    "    * eg., * means bullet point, # title\n",
    "    \n",
    "* code cell\n",
    "    * runs python\n",
    "    * number adjacent, which shows the run order\n",
    "    * shows output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* keyboard shortcuts:\n",
    "    * ESC -- enter command mode --\n",
    "        * arrows: move around the document\n",
    "        * a: insert cell above\n",
    "        * b: insert cell below\n",
    "        * dd: delete cell\n",
    "        * z: undo\n",
    "        * m: make cell markdown (text)\n",
    "        * y: make cell code (python)\n",
    "        * SHIFT+ENTER - run and move down one cell\n",
    "        * CTRL+ENTER - run and remain at current location\n",
    "    * Enter -- edit mode --\n",
    "        * arrows: move around the cell\n",
    "        * SHIFT/CTRL+ENTER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello World\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem:\n",
    "Cell order $\\ne$ run order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 30)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Benefit:\n",
    "easier to see output, reason about output, make decisions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "x = np.random.normal(18, 5, 20)\n",
    "grades = x**2 + 10\n",
    "\n",
    "sns.scatterplot(x, grades);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Refresher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 4)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 10\n",
    "y = 12\n",
    "\n",
    "observations = [1, 2, 3, 4]\n",
    "\n",
    "observations[0], observations[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## List Slicing\n",
    "\n",
    "* : until"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observations[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 4]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observations[-2:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observations[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 4]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observations[2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' the change you wish to see in the forest'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quote = \"be the change you wish to see in the weorld!\"\n",
    "\n",
    "quote[2:-7] + 'forest'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = {\n",
    "    'age': [18, 19, 20, 19],\n",
    "    'rating': [7, 8, 6]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset['age'][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "4\n",
      "9\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "for x in observations:\n",
    "    print(x ** 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n",
      "21\n",
      "39\n"
     ]
    }
   ],
   "source": [
    "d = [(18, 7), (19, 2), (30, 9)]\n",
    "\n",
    "for (x, y) in d:\n",
    "    print(x + y)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(x_age, x_year):\n",
    "    return 3*x_age + x_year + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(18, 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(8, 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise\n",
    "\n",
    "* Set up a data analysis problem\n",
    "    * define some observed features (, columns, characteristics) using lists\n",
    "    * bundle them into a single dictionary\n",
    "    * use a loop to calculate a mean of each column\n",
    "    * use `def` to define a function for calculating this mean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Advanced Python Syntax\n",
    "### For Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.3"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(x1, x2):\n",
    "    return 0.5*x1 + 0.9*x2 + 5\n",
    "\n",
    "predict(1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "people = [(50, 90), (15, 10), (75, 75)]\n",
    "\n",
    "y = []\n",
    "for x1, x2 in people:\n",
    "    y.append(predict(x1, x2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[111.0, 21.5, 110.0]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* comprehension\n",
    "    * set builder notation (in mathematics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[111.0, 21.5, 110.0]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[predict(x1, x2) for x1, x2 in people]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SELECT predict(Age, Height) FROM people WHERE Age >= 18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[111.0, 110.0]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[ predict(Age, Height) for Age, Height in people if Age >= 18 ] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3125"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(x):\n",
    "    return x ** 5\n",
    "\n",
    "f(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = lambda x: x ** 2\n",
    "\n",
    "g(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def algorithm(a, b):\n",
    "    linear_model = lambda x : a*x + b\n",
    "    \n",
    "    return linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "h = algorithm(3, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "j = algorithm(1, 2)\n",
    "j(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean([1, 2, 3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics as s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.mean(range(1, 100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statistics import mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean(range(1, 100, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statistics import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Decimal',\n",
       " 'Fraction',\n",
       " 'StatisticsError',\n",
       " '__all__',\n",
       " '__builtins__',\n",
       " '__cached__',\n",
       " '__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__spec__',\n",
       " '_coerce',\n",
       " '_convert',\n",
       " '_counts',\n",
       " '_exact_ratio',\n",
       " '_fail_neg',\n",
       " '_find_lteq',\n",
       " '_find_rteq',\n",
       " '_isfinite',\n",
       " '_ss',\n",
       " '_sum',\n",
       " 'bisect_left',\n",
       " 'bisect_right',\n",
       " 'collections',\n",
       " 'groupby',\n",
       " 'harmonic_mean',\n",
       " 'math',\n",
       " 'mean',\n",
       " 'median',\n",
       " 'median_grouped',\n",
       " 'median_high',\n",
       " 'median_low',\n",
       " 'mode',\n",
       " 'numbers',\n",
       " 'pstdev',\n",
       " 'pvariance',\n",
       " 'stdev',\n",
       " 'variance']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(statistics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[1;31mSignature:\u001b[0m \u001b[0mstdev\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxbar\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
       "\u001b[1;31mDocstring:\u001b[0m\n",
       "Return the square root of the sample variance.\n",
       "\n",
       "See ``variance`` for arguments and other details.\n",
       "\n",
       ">>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n",
       "1.0810874155219827\n",
       "\u001b[1;31mFile:\u001b[0m      c:\\users\\michael\\anaconda3\\lib\\statistics.py\n",
       "\u001b[1;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stdev?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function stdev in module statistics:\n",
      "\n",
      "stdev(data, xbar=None)\n",
      "    Return the square root of the sample variance.\n",
      "    \n",
      "    See ``variance`` for arguments and other details.\n",
      "    \n",
      "    >>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n",
      "    1.0810874155219827\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(stdev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Libraries for Data Science\n",
    "\n",
    "Libraries = bundles of reusable code specialized for particular tasks\n",
    "Data Science libraries for python are not written in python\n",
    "\n",
    "* NumPy\n",
    "    * wrapper over linear algebra libraries in fortran\n",
    "    * provides a performant \"array\"\n",
    "        * array = vector, matrix, ....\n",
    "        * table of numbers\n",
    "        \n",
    "* Pandas\n",
    "    * wrapper over numpy\n",
    "    * provides the dataframe\n",
    "        * table-like datastructure\n",
    "        \n",
    "* Matplotlib\n",
    "    * wrapper over matplotlib... graphing, plotting...\n",
    "    * python's api\n",
    "    * seaborn\n",
    "        * wrapper over matplotlib \n",
    "        * simplifies common plotting needs\n",
    "        \n",
    "### Machine Learning\n",
    "* Sklearn\n",
    "    - off the shelf, standard, starter, try-first\n",
    "    - general machine learning problem \n",
    "    \n",
    "    \n",
    "* Tensorflow\n",
    "    * lower-level library for defing computational graphs\n",
    "        * graph which describes how a mathematic function will be executed\n",
    "        * executes efficienteny (stores reusable intermediates, tracks gradients) \n",
    "        \n",
    "    * a neural network is just a complex regression model \n",
    "        * tensorflow makes executing those models more efficient\n",
    "        \n",
    "* Keras\n",
    "    * wrapper over tensorflow\n",
    "    * defines networks in a \"bigger picture\" style\n",
    "    * explicitly in terms of hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n",
       "       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n",
       "       52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n",
       "       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n",
       "       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array(range(1, 100))\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.21 µs ± 13.8 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "np.arange(1,1000).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.1 µs ± 225 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "sum(range(1, 1000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Age': np.arange(10, 20),\n",
    "    'Grade': np.random.normal(55, 15, 10)\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>72.923712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>37.746709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>42.876918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>70.530113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14</td>\n",
       "      <td>61.181535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15</td>\n",
       "      <td>45.706191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16</td>\n",
       "      <td>64.500285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17</td>\n",
       "      <td>33.695867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18</td>\n",
       "      <td>48.062336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19</td>\n",
       "      <td>50.653070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age      Grade\n",
       "0   10  72.923712\n",
       "1   11  37.746709\n",
       "2   12  42.876918\n",
       "3   13  70.530113\n",
       "4   14  61.181535\n",
       "5   15  45.706191\n",
       "6   16  64.500285\n",
       "7   17  33.695867\n",
       "8   18  48.062336\n",
       "9   19  50.653070"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52.78767348936989"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Grade'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.25"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# (SELECT Age WHERE Grade > 55) AVG\n",
    "\n",
    "df.loc[ df['Grade'] > 55, 'Age'].mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-110-d751b63f6bba>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnormal\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m55\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m15\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m100000000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m;\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python37\\site-packages\\seaborn\\distributions.py\u001b[0m in \u001b[0;36mdistplot\u001b[1;34m(a, bins, hist, kde, rug, fit, hist_kws, kde_kws, rug_kws, fit_kws, color, vertical, norm_hist, axlabel, label, ax)\u001b[0m\n\u001b[0;32m    213\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mhist\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    214\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mbins\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 215\u001b[1;33m             \u001b[0mbins\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_freedman_diaconis_bins\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m50\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    216\u001b[0m         \u001b[0mhist_kws\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"alpha\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0.4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    217\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mLooseVersion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmpl\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__version__\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mLooseVersion\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"2.2\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python37\\site-packages\\seaborn\\distributions.py\u001b[0m in \u001b[0;36m_freedman_diaconis_bins\u001b[1;34m(a)\u001b[0m\n\u001b[0;32m     32\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m     \u001b[0mh\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m2\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0miqr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m/\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m**\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;33m/\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m     \u001b[1;31m# fall back to sqrt(a) bins if iqr is 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mh\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python37\\site-packages\\seaborn\\utils.py\u001b[0m in \u001b[0;36miqr\u001b[1;34m(a)\u001b[0m\n\u001b[0;32m    364\u001b[0m     \u001b[1;34m\"\"\"Calculate the IQR for an array of numbers.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    365\u001b[0m     \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 366\u001b[1;33m     \u001b[0mq1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscoreatpercentile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m25\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    367\u001b[0m     \u001b[0mq3\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscoreatpercentile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m75\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    368\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mq3\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mq1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python37\\site-packages\\scipy\\stats\\stats.py\u001b[0m in \u001b[0;36mscoreatpercentile\u001b[1;34m(a, per, limit, interpolation_method, axis)\u001b[0m\n\u001b[0;32m   1814\u001b[0m         \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlimit\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m&\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[0mlimit\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1815\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1816\u001b[1;33m     \u001b[0msorted_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1817\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1818\u001b[0m         \u001b[0maxis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Roaming\\Python\\Python37\\site-packages\\numpy\\core\\fromnumeric.py\u001b[0m in \u001b[0;36msort\u001b[1;34m(a, axis, kind, order)\u001b[0m\n\u001b[0;32m    932\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    933\u001b[0m         \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"K\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 934\u001b[1;33m     \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    935\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    936\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(np.random.normal(55, 15, 100000000));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
